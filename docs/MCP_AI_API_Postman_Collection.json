{
  "info": {
    "name": "Global MCP Client - AI Controller API",
    "description": "Comprehensive test collection for the AI Controller REST API endpoints",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "noauth"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set base URL for all requests",
          "pm.globals.set('baseUrl', 'http://localhost:8082');"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8082",
      "type": "string"
    },
    {
      "key": "contextId",
      "value": "test-context-{{$randomUUID}}",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health & Status",
      "item": [
        {
          "name": "AI Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has health status', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.equal('healthy');",
                  "});",
                  "",
                  "pm.test('Response has aiEnabled flag', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('aiEnabled');",
                  "    pm.expect(jsonData.aiEnabled).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/ai/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "health"]
            },
            "description": "Check if AI service is healthy and ready to process requests"
          }
        },
        {
          "name": "AI Service Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has statistics', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('activeContexts');",
                  "    pm.expect(jsonData).to.have.property('aiEnabled');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/ai/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "stats"]
            },
            "description": "Get statistics about AI service usage and active contexts"
          }
        },
        {
          "name": "Available MCP Tools",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/ai/tools",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "tools"]
            },
            "description": "Get summary of all available MCP tools across all servers"
          }
        }
      ],
      "description": "Health check and status endpoints"
    },
    {
      "name": "AI Assistant Interactions",
      "item": [
        {
          "name": "Simple Ask - General Question",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has expected fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('question');",
                  "    pm.expect(jsonData).to.have.property('response');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "});",
                  "",
                  "pm.test('Question matches request', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.question).to.equal('What is MCP?');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"What is MCP?\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ai/ask",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "ask"]
            },
            "description": "Ask a simple question to the AI assistant (stateless)"
          }
        },
        {
          "name": "Simple Ask - Database Question",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has expected fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('question');",
                  "    pm.expect(jsonData).to.have.property('response');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"How do I list all databases?\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ai/ask",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "ask"]
            },
            "description": "Ask about database operations"
          }
        },
        {
          "name": "Chat - Start Conversation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has chat fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('response');",
                  "    pm.expect(jsonData).to.have.property('contextId');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "});",
                  "",
                  "pm.test('Store context ID for follow-up', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.globals.set('storedContextId', jsonData.contextId);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Hello! I need help with database operations. Can you list all available databases?\",\n  \"contextId\": \"{{contextId}}\",\n  \"serverId\": \"mongo-mcp-server-test\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ai/chat",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "chat"]
            },
            "description": "Start a conversation with the AI assistant about database operations"
          }
        },
        {
          "name": "Chat - Follow-up Question",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response maintains context', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('contextId');",
                  "    const requestContextId = pm.globals.get('storedContextId') || pm.collectionVariables.get('contextId');",
                  "    pm.expect(jsonData.contextId).to.equal(requestContextId);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Now show me the collections in the testdb database\",\n  \"contextId\": \"{{contextId}}\",\n  \"serverId\": \"mongo-mcp-server-test\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ai/chat",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "chat"]
            },
            "description": "Follow-up question in the same conversation context"
          }
        },
        {
          "name": "Chat - Create Collection",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has tool execution results', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('response');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Create a new collection called 'users' in the testdb database\",\n  \"contextId\": \"{{contextId}}\",\n  \"serverId\": \"mongo-mcp-server-test\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ai/chat",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "chat"]
            },
            "description": "Ask AI to create a new collection"
          }
        },
        {
          "name": "Chat - Insert Document",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains tool execution', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('response');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Insert a document with name 'John Doe' and email 'john@example.com' into the users collection\",\n  \"contextId\": \"{{contextId}}\",\n  \"serverId\": \"mongo-mcp-server-test\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ai/chat",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "chat"]
            },
            "description": "Ask AI to insert a document"
          }
        }
      ],
      "description": "AI assistant chat and ask endpoints"
    },
    {
      "name": "Context Management",
      "item": [
        {
          "name": "Get Conversation Context",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response has context info', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('contextId');",
                  "        pm.expect(jsonData).to.have.property('messageCount');",
                  "        pm.expect(jsonData).to.have.property('createdAt');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/ai/context/{{contextId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "context", "{{contextId}}"]
            },
            "description": "Retrieve information about a specific conversation context"
          }
        },
        {
          "name": "Get Non-existent Context",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/ai/context/non-existent-context-id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "context", "non-existent-context-id"]
            },
            "description": "Test error handling for non-existent context"
          }
        }
      ],
      "description": "Context management and retrieval"
    },
    {
      "name": "Error Handling Tests",
      "item": [
        {
          "name": "Ask - Empty Question",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 or 200 with error', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 200]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response indicates error', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('error');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ai/ask",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "ask"]
            },
            "description": "Test handling of empty question"
          }
        },
        {
          "name": "Chat - Missing Message",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"contextId\": \"test-context\",\n  \"serverId\": \"mongo-mcp-server-test\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ai/chat",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "chat"]
            },
            "description": "Test validation for missing message field"
          }
        },
        {
          "name": "Chat - Invalid JSON",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ invalid json }"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ai/chat",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "chat"]
            },
            "description": "Test handling of invalid JSON"
          }
        }
      ],
      "description": "Error handling and validation tests"
    },
    {
      "name": "Performance Tests",
      "item": [
        {
          "name": "Concurrent Ask Requests",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"What time is it now? Request {{$randomInt}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ai/ask",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "ask"]
            },
            "description": "Test concurrent request handling"
          }
        }
      ],
      "description": "Performance and load testing"
    }
  ]
}
