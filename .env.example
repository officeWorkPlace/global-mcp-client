# Environment Variables Template
# Copy this file to .env and fill in your actual API keys

# === PRIMARY AI PROVIDERS ===
# OpenAI GPT (Recommended primary)
OPENAI_API_KEY=your-openai-api-key-here

# Google Gemini (Recommended secondary) 
GEMINI_API_KEY=your-gemini-api-key-here

# Anthropic Claude (Optional tertiary)
ANTHROPIC_API_KEY=your-anthropic-api-key-here

# === DATABASE CONNECTIONS ===
# Oracle Database (for Oracle MCP Server)
ORACLE_DB_URL=jdbc:oracle:thin:@localhost:1521:XE
ORACLE_DB_USER=C##loan_schema
ORACLE_DB_PASSWORD=loan_data
ORACLE_HOST=localhost
ORACLE_PORT=1521
ORACLE_SID=XE

# MongoDB (if using MongoDB MCP Server)
MONGODB_URI=mongodb://localhost:27017/mcpserver
MONGODB_DB_NAME=mcpserver

# PostgreSQL (if using PostgreSQL MCP Server)
POSTGRES_URL=jdbc:postgresql://localhost:5432/mcpdb
POSTGRES_USER=mcpuser
POSTGRES_PASSWORD=mcppass

# === MCP SERVER CONFIGURATION ===
# Enable/disable specific server types
MCP_TOOLS_EXPOSURE=all
ENTERPRISE_ENABLED=true

# === APPLICATION CONFIGURATION ===
# Spring profiles (dev, prod, test, cli, server)
SPRING_PROFILES_ACTIVE=dev

# Logging levels
LOGGING_LEVEL_ROOT=WARN
LOGGING_LEVEL_DEEPAI=DEBUG

# === OLLAMA CONFIGURATION (Local AI) ===
# Ollama server URL (if running locally)
OLLAMA_BASE_URL=http://localhost:11434

# === GITHUB INTEGRATION (Optional) ===
# GitHub Personal Access Token (for GitHub MCP Server)
GITHUB_TOKEN=your-github-token-here

# === ADDITIONAL API KEYS ===
# Azure OpenAI (if using Azure)
AZURE_OPENAI_API_KEY=your-azure-openai-key-here
AZURE_OPENAI_ENDPOINT=https://your-resource.openai.azure.com/

# === SECURITY & NETWORKING ===
# Server port override
SERVER_PORT=8081

# CORS settings
CORS_ALLOWED_ORIGINS=*
CORS_ALLOWED_METHODS=*
CORS_ALLOWED_HEADERS=*

# === QUICK SETUP COMMANDS ===
# 1. Test OpenAI connection:
#    ./test-openai-api.sh
# 
# 2. Test Gemini connection:
#    curl -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent?key=${GEMINI_API_KEY}" \
#         -H "Content-Type: application/json" \
#         -d '{"contents":[{"parts":[{"text":"Hello"}]}]}'
#
# 3. Start application:
#    mvn spring-boot:run
#
# 4. Test CLI:
#    java -jar target/global-mcp-client-1.0.0-SNAPSHOT-cli.jar server list